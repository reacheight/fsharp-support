Language: PsiLanguageType:F#
IFSharpImplFile
  IAnonModuleDeclaration
    FSharpTokenType+DoTokenElement(type:DO, text:do)
    NewLine(type:NEW_LINE, text:\n) spaces:"\n"
    Whitespace(type:WHITE_SPACE, text:    ) spaces:"    "
    IDo
      IChameleonExpression
        IDoExpr
          ILetOrUseExpr
            FSharpTokenType+LetTokenElement(type:LET, text:let)
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            FSharpTokenType+RecTokenElement(type:REC, text:rec)
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            ILocalBinding
              ILocalReferencePat
                IExpressionReferenceName
                  FSharpIdentifierToken(type:IDENTIFIER, text:x)
              Whitespace(type:WHITE_SPACE, text: ) spaces:" "
              FSharpTokenType+EqualsTokenElement(type:EQUALS, text:=)
              Whitespace(type:WHITE_SPACE, text: ) spaces:" "
              IConstExpr
                FSharpTokenType+LparenTokenElement(type:LPAREN, text:()
                FSharpTokenType+RparenTokenElement(type:RPAREN, text:))
            NewLine(type:NEW_LINE, text:\n) spaces:"\n"
            Whitespace(type:WHITE_SPACE, text:    ) spaces:"    "
            FSharpTokenType+AndTokenElement(type:AND, text:and)
            Whitespace(type:WHITE_SPACE, text: ) spaces:" "
            ILocalBinding
              ILocalReferencePat
                IExpressionReferenceName
                  FSharpIdentifierToken(type:IDENTIFIER, text:y)
              Whitespace(type:WHITE_SPACE, text: ) spaces:" "
              FSharpTokenType+EqualsTokenElement(type:EQUALS, text:=)
              Whitespace(type:WHITE_SPACE, text: ) spaces:" "
              IConstExpr
                FSharpTokenType+LparenTokenElement(type:LPAREN, text:()
                FSharpTokenType+RparenTokenElement(type:RPAREN, text:))
            NewLine(type:NEW_LINE, text:\n) spaces:"\n"
            Whitespace(type:WHITE_SPACE, text:    ) spaces:"    "
            IConstExpr
              FSharpTokenType+LparenTokenElement(type:LPAREN, text:()
              FSharpTokenType+RparenTokenElement(type:RPAREN, text:))
    NewLine(type:NEW_LINE, text:\n) spaces:"\n"

